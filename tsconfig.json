{
  // see https://www.typescriptlang.org/tsconfig to better understand tsconfigs
  //  "include": [
  //    "./src/**/*"
  //  ],
  //  "exclude": [
  //    "node_modules",
  //    "build",
  //    "**/*.(spec|test).ts"
  //  ],
  "compilerOptions": {
    /* ----------------------------------------------------------------------------------------------------------- */
    // 기본 옵션
    // 증분 컴파일 활성화
    "incremental": true,
    // ECMAScript 목표 버전 설정: 'ES3'(기본), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018', 'ES2019', 'ES2020', or 'ESNEXT'.
    "target": "esnext",
    // 생성될 모듈 코드 설정: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'.
    "module": "commonjs",
    // 컴파일 과정에 사용될 라이브러리 파일 설정
    //    "lib": [
    //      "es2020"
    //    ],
    // JavaScript 파일 컴파일 허용
    //    "allowJs": true,

    // .js 파일 오류 리포트 설정
    //    "checkJs": true,
    // 생성될 JSX 코드 설정: 'preserve', 'react-native', or 'react'.
    //    "jsx": "react",
    // '.d.ts' 파일 생성 설정
    "declaration": true,
    // 해당하는 각 '.d.ts' 파일에 대한 소스 맵 생성
    "declarationMap": true,
    // 소스맵 '.map' 파일 생성 설정
    //    "sourceMap": true,
    // 복수 파일을 묶어 하나의 파일로 출력 설정
    //    "outFile": "./",
    // 출력될 디렉토리 설정
    "outDir": "./dist",
    // 입력 파일들의 루트 디렉토리 설정. --outDir 옵션을 사용해 출력 디렉토리 설정이 가능 */
    //    "rootDir": ".",
    // 프로젝트 컴파일 활성화
    //    "composite": true,
    // 증분 컴파일 정보를 저장할 파일 지정
    //    "tsBuildInfoFile": "./",
    // 출력 시, 주석 제거 설정
    "removeComments": true,
    // 출력 방출(emit) 유무 설정
    //    "noEmit": true,

    // 'tslib'로부터 헬퍼를 호출할 지 설정 */
    //    "importHelpers": true,
    // 'ES5' 혹은 'ES3' 타겟 설정 시 Iterables 'for-of', 'spread', 'destructuring' 완벽 지원 설정
    //    "downlevelIteration": true,
    // 각 파일을 별도 모듈로 변환 ('ts.transpileModule'과 유사) */
    //    "isolatedModules": true,

    // 엄격한 유형 검사 옵션
    /* ----------------------------------------------------------------------------------------------------------- */
    // 모든 엄격한 유형 검사 옵션 활성화
    //    "strict": true,
    // 명시적이지 않은 'any' 유형으로 표현식 및 선언 사용 시 오류 발생
    "noImplicitAny": false,
    // 엄격한 null 검사 사용
    "strictNullChecks": false,
    // 엄격한 함수 유형 검사 사용
    //    "strictFunctionTypes": true,
    // 엄격한 'bind', 'call', 'apply' 함수 메서드 사용
    "strictBindCallApply": false,
    // 클래스에서 속성 초기화 엄격 검사 사용
    //    "strictPropertyInitialization": true,
    // 명시적이지 않은 'any' 유형으로 'this' 표현식 사용 시 오류 발생
    //    "noImplicitThis": true,
    // 엄격모드에서 구문 분석 후, 각 소스 파일에 "use strict" 코드를 출력
    //    "alwaysStrict": true,
    /* ----------------------------------------------------------------------------------------------------------- */
    // 추가 검사 옵션
    // 사용되지 않은 로컬이 있을 경우, 오류로 보고
    //    "noUnusedLocals": true,
    // 사용되지 않은 매개변수가 있을 경우, 오류로 보고
    //    "noUnusedParameters": true,
    // 함수가 값을 반환하지 않을 경우, 오류로 보고
    //    "noImplicitReturns": true,
    // switch 문 오류 유형에 대한 오류 보고
    "noFallthroughCasesInSwitch": false,
    // 인덱스 시그니처 결과에 'undefined' 포함
    //    "noUncheckedIndexedAccess": true,
    /* ----------------------------------------------------------------------------------------------------------- */
    // 모듈 분석 옵션
    // 모듈 분석 방법 설정: 'node' (Node.js) 또는 'classic' (TypeScript pre-1.6).
    "moduleResolution": "node",
    // 절대 경로 모듈이 아닌, 모듈이 기본적으로 위치한 디렉토리 설정 (예: './modules-name')
    "baseUrl": "./",
    // 'baseUrl'을 기준으로 상대 위치로 가져오기를 다시 매핑하는 항목 설정
    //    "paths": {},
    // 런타임 시 프로젝트 구조를 나타내는 로트 디렉토리 목록
    //    "rootDirs": [],
    // 유형 정의를 포함할 디렉토리 목록
    //    "typeRoots": [],
    // 컴파일 시 포함될 유형 선언 파일 입력
    //    "types": [],
    // 기본 출력(default export)이 없는 모듈로부터 기본 호출을 허용 (이 코드는 단지 유형 검사만 수행)
    "allowSyntheticDefaultImports": true,
    // 모든 가져오기에 대한 네임스페이스 객체 생성을 통해 CommonJS와 ES 모듈 간의 상호 운용성을 제공. 'allowSyntheticDefaultImports' 암시
    "esModuleInterop": true,
    // symlinks 실제 경로로 결정하지 않음
    //    "preserveSymlinks": true,
    // 모듈에서 UMD 글로벌에 접근 허용
    //    "allowUmdGlobalAccess": true,
    /* ----------------------------------------------------------------------------------------------------------- */
    // 소스맵 옵션
    // 디버거(debugger)가 소스 위치 대신 TypeScript 파일을 찾을 위치 설정
    //    "sourceRoot": "./",
    // 디버거가 생성된 위치 대신 맵 파일을 찾을 위치 설정
    //    "mapRoot": "./",
    // 하나의 인라인 소스맵을 내보내도록 설정
    //    "inlineSourceMap": true,
    // 하나의 파일 안에 소스와 소스 코드를 함께 내보내도록 설정. '--inlineSourceMap' 또는 '--sourceMap' 설정이 필요
    //    "inlineSources": true,
    /* ----------------------------------------------------------------------------------------------------------- */
    // 실험적인 기능 옵션
    // ES7 데코레이터(decorators) 실험 기능 지원 설정 */
    "experimentalDecorators": true,
    // 데코레이터를 위한 유형 메타데이터 방출 실험 기능 지원 설정 */
    "emitDecoratorMetadata": true,
    /* ----------------------------------------------------------------------------------------------------------- */
    // 고급 옵션
    // 선언 파일 유형 검사 스킵
    "skipLibCheck": true,
    // 동일한 파일에 대한 일관되지 않은 케이스 참조를 허용하지 않음
    "forceConsistentCasingInFileNames": false
  }
}
